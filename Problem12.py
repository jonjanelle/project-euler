'''
The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?
'''

import math
'''
#n(n+1)/2 is nth triangular number

maxCount = 1
n = 10000
while maxCount <= 500:
    #print(n)
    n += 1
    num = n*(n+1)/2
    if num%2==1:
        continue
    
    count = 0
    for i in range(1,int(math.sqrt(num))):
        if num%i==0:
            count += 2
        
    maxCount = count + 1
    
print(int(n))
'''


'''
Alternate method:
comprehension used
'''

from functools import reduce

def numFactor(num, fac):
    count = 0
    while num%fac==0:
        count += 1
        num = num/fac
    return count

def factors(n):
    result = set()
    
    for i in range(1,int(math.sqrt(n))+1):
        if n%i==0:
            result.add(i)
            result.add(n//i)
    #return set(
    #return(reduce(list.__add__,([i, n//i] for i in range(1, int(n**0.5) + 1) if n % i == 0)))
    return(result)

count = int()
n = 1
while count<501:
    count = 0
    for div in factors(n):
        count += numFactor(n,div)
    n+=1
print(count*(count+1)/2)
